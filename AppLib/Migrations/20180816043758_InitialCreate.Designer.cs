// <auto-generated />
using System;
using AppLib;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace AppLib.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20180816043758_InitialCreate")]
    partial class InitialCreate
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.1.0-rtm-30799")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("AppLib.Modules.Admin.Admin", b =>
                {
                    b.Property<long?>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime?>("CreatedTime")
                        .IsRequired();

                    b.Property<string>("Email")
                        .IsRequired();

                    b.Property<bool?>("Enabled");

                    b.Property<bool?>("IsDeleted");

                    b.Property<string>("Password")
                        .IsRequired();

                    b.Property<byte[]>("TimeStamp")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate();

                    b.Property<string>("Username")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("Username")
                        .IsUnique();

                    b.ToTable("Admins");
                });

            modelBuilder.Entity("AppLib.Modules.Banner.Banner", b =>
                {
                    b.Property<long?>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime?>("CreatedDate")
                        .IsRequired();

                    b.Property<DateTime?>("ExpiredDate");

                    b.Property<string>("ImageName")
                        .HasMaxLength(250);

                    b.Property<bool?>("IsActivate");

                    b.Property<bool?>("IsDefault");

                    b.Property<bool?>("IsDelete");

                    b.Property<long?>("PersonalId")
                        .HasMaxLength(500);

                    b.Property<DateTime?>("PublishDate")
                        .IsRequired();

                    b.Property<long>("Ranking");

                    b.Property<byte[]>("TimeStamp")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate();

                    b.Property<string>("Title")
                        .IsRequired();

                    b.Property<DateTime?>("UpdatedDate");

                    b.Property<string>("Url")
                        .HasMaxLength(1000);

                    b.Property<long?>("UtmId");

                    b.HasKey("Id");

                    b.HasIndex("PersonalId");

                    b.HasIndex("UtmId");

                    b.ToTable("Banners");
                });

            modelBuilder.Entity("AppLib.Modules.Beneficiary.Beneficiary", b =>
                {
                    b.Property<long?>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreatedDate");

                    b.Property<string>("FamilyRelation")
                        .IsRequired();

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(100);

                    b.Property<long?>("InsuredId")
                        .IsRequired();

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(100);

                    b.Property<int>("Percent");

                    b.Property<long>("RelationId");

                    b.Property<byte[]>("TimeStamp")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate();

                    b.Property<long>("TitleId");

                    b.Property<DateTime?>("UpdatedDate");

                    b.Property<int>("age");

                    b.HasKey("Id");

                    b.HasIndex("RelationId");

                    b.HasIndex("TitleId");

                    b.ToTable("Beneficiaries");
                });

            modelBuilder.Entity("AppLib.Modules.DropLead.DropLead", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool?>("ApiCompleted");

                    b.Property<string>("ConvenienceTime");

                    b.Property<DateTime?>("CreatedDate");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(100);

                    b.Property<string>("Firstname")
                        .IsRequired()
                        .HasMaxLength(100);

                    b.Property<long?>("HelpId");

                    b.Property<bool?>("IsSuccess");

                    b.Property<string>("Lastname")
                        .IsRequired()
                        .HasMaxLength(100);

                    b.Property<string>("Mobile")
                        .IsRequired()
                        .HasMaxLength(10);

                    b.Property<long?>("ProductId");

                    b.Property<string>("SuccessBy")
                        .HasMaxLength(100);

                    b.Property<string>("Title");

                    b.Property<DateTime?>("UpdatedDate");

                    b.HasKey("Id");

                    b.HasIndex("HelpId");

                    b.ToTable("DropLeads");
                });

            modelBuilder.Entity("AppLib.Modules.DropLead.Help", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime?>("CreateDate");

                    b.Property<bool?>("IsActive");

                    b.Property<int?>("Ranking");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(150);

                    b.Property<DateTime?>("UpdateDate");

                    b.HasKey("Id");

                    b.ToTable("Helps");
                });

            modelBuilder.Entity("AppLib.Modules.Insured.Insured", b =>
                {
                    b.Property<long?>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("AliveDescription");

                    b.Property<string>("AliveErrorMessage");

                    b.Property<string>("AliveStatusCode");

                    b.Property<bool>("AlivelsError");

                    b.Property<DateTime>("BirthDate");

                    b.Property<string>("Building");

                    b.Property<string>("BusinessMessage");

                    b.Property<string>("CitizenId");

                    b.Property<string>("CreatedBy")
                        .IsRequired();

                    b.Property<DateTime?>("CreatedDate")
                        .IsRequired();

                    b.Property<long>("DistrictId");

                    b.Property<string>("Email");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(255);

                    b.Property<int>("Height");

                    b.Property<long>("InsuredTypeId");

                    b.Property<bool>("IsPayer");

                    b.Property<long>("JobDescriptionId");

                    b.Property<long?>("JobId");

                    b.Property<string>("JobOther");

                    b.Property<string>("LaserCode");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(255);

                    b.Property<string>("MasterGender");

                    b.Property<string>("Mobile");

                    b.Property<string>("Moo");

                    b.Property<long>("NationalityId");

                    b.Property<string>("No");

                    b.Property<bool>("NoBeneficiary");

                    b.Property<long>("OrderId");

                    b.Property<long>("ProvinceId");

                    b.Property<long>("RelationId");

                    b.Property<string>("Road");

                    b.Property<long>("Sequence");

                    b.Property<string>("Soi");

                    b.Property<string>("StatusCode");

                    b.Property<long>("StatusId");

                    b.Property<long>("SubDistrictId");

                    b.Property<string>("TechMessage");

                    b.Property<long>("TitleId");

                    b.Property<string>("UpdatedBy");

                    b.Property<DateTime?>("UpdatedDate");

                    b.Property<int>("Weight");

                    b.Property<long>("ZipCodeId");

                    b.HasKey("Id");

                    b.HasIndex("DistrictId");

                    b.HasIndex("InsuredTypeId");

                    b.HasIndex("JobDescriptionId");

                    b.HasIndex("JobId");

                    b.HasIndex("NationalityId");

                    b.HasIndex("OrderId");

                    b.HasIndex("ProvinceId");

                    b.HasIndex("RelationId");

                    b.HasIndex("StatusId");

                    b.HasIndex("SubDistrictId");

                    b.HasIndex("TitleId");

                    b.HasIndex("ZipCodeId");

                    b.ToTable("Insureds");
                });

            modelBuilder.Entity("AppLib.Modules.InsuredType.InsuredType", b =>
                {
                    b.Property<long?>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("CreatedBy")
                        .IsRequired();

                    b.Property<DateTime?>("CreatedDate")
                        .IsRequired();

                    b.Property<bool?>("IsActivate");

                    b.Property<bool>("IsInsure")
                        .HasMaxLength(255);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255);

                    b.Property<long?>("Sequence")
                        .IsRequired();

                    b.Property<string>("UpdatedBy");

                    b.Property<DateTime?>("UpdatedDate");

                    b.HasKey("Id");

                    b.ToTable("InsuredTypes");
                });

            modelBuilder.Entity("AppLib.Modules.Job.Job", b =>
                {
                    b.Property<long?>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.Property<DateTime?>("CreatedDate")
                        .IsRequired();

                    b.Property<bool?>("IsActivate");

                    b.Property<int?>("Ranking");

                    b.Property<byte[]>("TimeStamp")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate();

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.Property<DateTime?>("UpdatedDate");

                    b.HasKey("Id");

                    b.ToTable("Jobs");
                });

            modelBuilder.Entity("AppLib.Modules.JobDescription.JobDescription", b =>
                {
                    b.Property<long?>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasMaxLength(10);

                    b.Property<string>("CreatedBy")
                        .IsRequired();

                    b.Property<DateTime?>("CreatedDate")
                        .IsRequired();

                    b.Property<bool?>("IsActivate");

                    b.Property<long?>("JobId")
                        .IsRequired();

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(250);

                    b.Property<long?>("Sequence");

                    b.Property<string>("UpdatedBy");

                    b.Property<DateTime?>("UpdatedDate");

                    b.HasKey("Id");

                    b.HasIndex("JobId");

                    b.ToTable("JobDescriptions");
                });

            modelBuilder.Entity("AppLib.Modules.Kid.Kid", b =>
                {
                    b.Property<long?>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime?>("BirthDate");

                    b.Property<string>("Building")
                        .HasMaxLength(50);

                    b.Property<string>("CitizenId")
                        .HasMaxLength(20);

                    b.Property<DateTime?>("CreatedDate")
                        .IsRequired();

                    b.Property<long?>("DistrictId");

                    b.Property<string>("Email")
                        .HasMaxLength(50);

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.Property<string>("Gender")
                        .HasMaxLength(10);

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.Property<string>("Mobile")
                        .HasMaxLength(10);

                    b.Property<string>("Moo")
                        .HasMaxLength(50);

                    b.Property<string>("No");

                    b.Property<long?>("OrderId")
                        .IsRequired();

                    b.Property<long?>("ProvinceId");

                    b.Property<string>("Road")
                        .HasMaxLength(50);

                    b.Property<string>("Soi")
                        .HasMaxLength(50);

                    b.Property<long?>("StatusId");

                    b.Property<long?>("SubDistrictId");

                    b.Property<byte[]>("TimeStamp")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate();

                    b.Property<long?>("TitleId")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.Property<DateTime?>("UpdatedDate");

                    b.Property<long?>("ZipCodeId");

                    b.HasKey("Id");

                    b.HasIndex("DistrictId");

                    b.HasIndex("ProvinceId");

                    b.HasIndex("StatusId");

                    b.HasIndex("SubDistrictId");

                    b.HasIndex("TitleId");

                    b.HasIndex("ZipCodeId");

                    b.ToTable("Kids");
                });

            modelBuilder.Entity("AppLib.Modules.LifeStyleCategory.LifeStyle", b =>
                {
                    b.Property<long?>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime?>("CreatedDate");

                    b.Property<string>("ImageName")
                        .HasMaxLength(250);

                    b.Property<bool?>("IsActivate");

                    b.Property<bool?>("IsDelete");

                    b.Property<long?>("LifeStyleCategoryId");

                    b.Property<long?>("Ranking");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(250);

                    b.Property<DateTime?>("UpdatedDate");

                    b.HasKey("Id");

                    b.HasIndex("LifeStyleCategoryId");

                    b.ToTable("LifeStyles");
                });

            modelBuilder.Entity("AppLib.Modules.LifeStyleCategory.LifeStyleCategory", b =>
                {
                    b.Property<long?>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime?>("CreatedDate");

                    b.Property<string>("ImageName")
                        .HasMaxLength(250);

                    b.Property<bool?>("IsActivate");

                    b.Property<bool?>("IsDelete");

                    b.Property<long?>("Ranking");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(250);

                    b.Property<DateTime?>("UpdatedDate");

                    b.HasKey("Id");

                    b.ToTable("LifeStyleCategories");
                });

            modelBuilder.Entity("AppLib.Modules.LifeStyleCategory.LifeStyleCategoryProduct", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime?>("CreatedDate");

                    b.Property<long?>("LifeStyleCategoryId");

                    b.Property<long?>("ProductId");

                    b.Property<long?>("Ranking");

                    b.Property<DateTime?>("UpdatedDate");

                    b.HasKey("Id");

                    b.HasIndex("LifeStyleCategoryId");

                    b.HasIndex("ProductId");

                    b.ToTable("LifeStyleCategoryProducts");
                });

            modelBuilder.Entity("AppLib.Modules.LifeStyleCategory.LifeStyleProduct", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime?>("CreatedDate");

                    b.Property<long?>("LifeStyleId");

                    b.Property<long?>("ProductId");

                    b.Property<long?>("Ranking");

                    b.Property<DateTime?>("UpdatedDate");

                    b.HasKey("Id");

                    b.HasIndex("LifeStyleId");

                    b.HasIndex("ProductId");

                    b.ToTable("LifeStyleProducts");
                });

            modelBuilder.Entity("AppLib.Modules.Location.District", b =>
                {
                    b.Property<long?>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime?>("CreatedDate")
                        .IsRequired();

                    b.Property<bool?>("IsActivate");

                    b.Property<long?>("ProvinceId");

                    b.Property<int>("Ranking");

                    b.Property<byte[]>("TimeStamp")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate();

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.Property<DateTime?>("UpdatedDate");

                    b.HasKey("Id");

                    b.HasIndex("ProvinceId");

                    b.ToTable("Districts");
                });

            modelBuilder.Entity("AppLib.Modules.Location.Province", b =>
                {
                    b.Property<long?>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime?>("CreatedDate")
                        .IsRequired();

                    b.Property<bool?>("IsActivate");

                    b.Property<int>("Ranking");

                    b.Property<byte[]>("TimeStamp")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate();

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.Property<DateTime?>("UpdatedDate");

                    b.HasKey("Id");

                    b.ToTable("Provinces");
                });

            modelBuilder.Entity("AppLib.Modules.Location.SubDistrict", b =>
                {
                    b.Property<long?>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime?>("CreatedDate")
                        .IsRequired();

                    b.Property<long?>("DistrictId");

                    b.Property<bool?>("IsActivate");

                    b.Property<int>("Ranking");

                    b.Property<byte[]>("TimeStamp")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate();

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.Property<DateTime?>("UpdatedDate");

                    b.HasKey("Id");

                    b.HasIndex("DistrictId");

                    b.ToTable("SubDistricts");
                });

            modelBuilder.Entity("AppLib.Modules.Location.ZipCode", b =>
                {
                    b.Property<long?>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime?>("CreatedDate")
                        .IsRequired();

                    b.Property<bool?>("IsActivate");

                    b.Property<int>("Ranking");

                    b.Property<long?>("SubDistrictId");

                    b.Property<byte[]>("TimeStamp")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate();

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.Property<DateTime?>("UpdatedDate");

                    b.HasKey("Id");

                    b.HasIndex("SubDistrictId");

                    b.ToTable("ZipCodes");
                });

            modelBuilder.Entity("AppLib.Modules.Nationality.Nationality", b =>
                {
                    b.Property<long?>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime?>("CreatedDate")
                        .IsRequired();

                    b.Property<bool?>("IsActivate");

                    b.Property<int>("Ranking");

                    b.Property<byte[]>("TimeStamp")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate();

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.Property<DateTime?>("UpdatedDate");

                    b.HasKey("Id");

                    b.ToTable("Nationalities");
                });

            modelBuilder.Entity("AppLib.Modules.Order.Order", b =>
                {
                    b.Property<long?>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ApplyFor")
                        .HasMaxLength(10);

                    b.Property<string>("ApprovalCode")
                        .HasMaxLength(10);

                    b.Property<long?>("ByAdminId");

                    b.Property<int?>("CountKid")
                        .HasMaxLength(10);

                    b.Property<DateTime?>("CreatedDate");

                    b.Property<string>("Currency")
                        .HasMaxLength(50);

                    b.Property<long?>("DistrictId");

                    b.Property<bool?>("HasSpouse")
                        .HasMaxLength(50);

                    b.Property<int?>("Insurance");

                    b.Property<bool?>("IsDeleted");

                    b.Property<long?>("JobId");

                    b.Property<string>("Language")
                        .HasMaxLength(10);

                    b.Property<long?>("NationalityId");

                    b.Property<int?>("OrderStatusFront")
                        .IsRequired();

                    b.Property<DateTime?>("PaymentDate");

                    b.Property<int?>("PaymentFrequency")
                        .HasMaxLength(10);

                    b.Property<string>("PaymentMethod")
                        .HasMaxLength(50);

                    b.Property<int?>("PaymentStatusFront");

                    b.Property<string>("PlanCode")
                        .HasMaxLength(50);

                    b.Property<long?>("PlanId");

                    b.Property<string>("PolicyNumber")
                        .HasMaxLength(50);

                    b.Property<int?>("Premium");

                    b.Property<long?>("ProductId");

                    b.Property<long?>("ProvinceId");

                    b.Property<bool?>("ReceivePolicyByEmail");

                    b.Property<bool?>("ReceivePolicyByMail");

                    b.Property<string>("RefKey")
                        .HasMaxLength(50);

                    b.Property<string>("RegKey")
                        .HasMaxLength(20);

                    b.Property<string>("ReturnResult");

                    b.Property<string>("StatusBackCode")
                        .HasMaxLength(10);

                    b.Property<string>("StatusFrontCode")
                        .HasMaxLength(10);

                    b.Property<long?>("StatusId");

                    b.Property<long?>("SubDistrictId");

                    b.Property<byte[]>("TimeStamp")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate();

                    b.Property<long?>("TitleId");

                    b.Property<string>("TransactionId")
                        .HasMaxLength(50);

                    b.Property<string>("UTMCampaign");

                    b.Property<string>("UTMMedium")
                        .HasMaxLength(50);

                    b.Property<string>("UTMSource")
                        .HasMaxLength(50);

                    b.Property<string>("UnderWriteRuleMessage");

                    b.Property<bool?>("UnderWriteRuleStatus");

                    b.Property<DateTime?>("UpdatedDate");

                    b.Property<string>("UserId")
                        .HasMaxLength(250);

                    b.Property<long?>("ZipCodeId");

                    b.HasKey("Id");

                    b.HasIndex("DistrictId");

                    b.HasIndex("JobId");

                    b.HasIndex("NationalityId");

                    b.HasIndex("ProductId");

                    b.HasIndex("ProvinceId");

                    b.HasIndex("StatusId");

                    b.HasIndex("SubDistrictId");

                    b.HasIndex("TitleId");

                    b.HasIndex("ZipCodeId");

                    b.ToTable("Orders");
                });

            modelBuilder.Entity("AppLib.Modules.Payer.Payer", b =>
                {
                    b.Property<long?>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime?>("BirthDate");

                    b.Property<string>("Building")
                        .HasMaxLength(50);

                    b.Property<string>("CitizenId")
                        .HasMaxLength(20);

                    b.Property<DateTime?>("CreatedDate")
                        .IsRequired();

                    b.Property<long?>("DistrictId");

                    b.Property<string>("Email")
                        .HasMaxLength(50);

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.Property<string>("Gender")
                        .HasMaxLength(10);

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.Property<string>("Mobile")
                        .HasMaxLength(10);

                    b.Property<string>("Moo")
                        .HasMaxLength(50);

                    b.Property<string>("No");

                    b.Property<long?>("OrderId")
                        .IsRequired();

                    b.Property<long?>("ProvinceId");

                    b.Property<long?>("RelationId")
                        .IsRequired();

                    b.Property<string>("Road")
                        .HasMaxLength(50);

                    b.Property<string>("Soi")
                        .HasMaxLength(50);

                    b.Property<long?>("SubDistrictId");

                    b.Property<byte[]>("TimeStamp")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate();

                    b.Property<long?>("TitleId")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.Property<DateTime?>("UpdatedDate");

                    b.Property<long?>("ZipCodeId");

                    b.HasKey("Id");

                    b.HasIndex("DistrictId");

                    b.HasIndex("ProvinceId");

                    b.HasIndex("RelationId");

                    b.HasIndex("SubDistrictId");

                    b.HasIndex("TitleId");

                    b.HasIndex("ZipCodeId");

                    b.ToTable("Payers");
                });

            modelBuilder.Entity("AppLib.Modules.Personal.Personal", b =>
                {
                    b.Property<long?>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("AgeMax")
                        .IsRequired();

                    b.Property<int?>("AgeMin")
                        .IsRequired();

                    b.Property<DateTime?>("CreatedDate")
                        .IsRequired();

                    b.Property<string>("Gender")
                        .IsRequired()
                        .HasMaxLength(1);

                    b.Property<bool?>("IsDelete");

                    b.Property<byte[]>("TimeStamp")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate();

                    b.Property<DateTime?>("UpdatedDate");

                    b.HasKey("Id");

                    b.ToTable("Personals");
                });

            modelBuilder.Entity("AppLib.Modules.Product.Product", b =>
                {
                    b.Property<long?>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("CampaignCode");

                    b.Property<DateTime?>("CreatedDate")
                        .IsRequired();

                    b.Property<string>("Description");

                    b.Property<string>("DescriptionMarketing");

                    b.Property<int?>("EntryAgeMaximum");

                    b.Property<int?>("EntryAgeMinimum");

                    b.Property<DateTime?>("ExpiredDate");

                    b.Property<int?>("FamilyType");

                    b.Property<int?>("FormType")
                        .IsRequired();

                    b.Property<string>("ImageName")
                        .HasMaxLength(250);

                    b.Property<bool?>("IsActivate");

                    b.Property<bool?>("IsDelete");

                    b.Property<string>("MemberType")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.Property<string>("MetaDescription");

                    b.Property<string>("MetaKeywords");

                    b.Property<string>("PackageId");

                    b.Property<string>("PageTitle")
                        .IsRequired()
                        .HasMaxLength(250);

                    b.Property<long?>("ProductTypeId")
                        .IsRequired();

                    b.Property<DateTime?>("PublishDate");

                    b.Property<int?>("Ranking");

                    b.Property<string>("Slug")
                        .IsRequired()
                        .HasMaxLength(250);

                    b.Property<string>("SponsorCode");

                    b.Property<string>("Thumbnail");

                    b.Property<byte[]>("TimeStamp")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate();

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(250);

                    b.Property<string>("TitleMarketing")
                        .IsRequired()
                        .HasMaxLength(250);

                    b.Property<DateTime>("UpdatedDate");

                    b.HasKey("Id");

                    b.HasIndex("ProductTypeId");

                    b.ToTable("Products");
                });

            modelBuilder.Entity("AppLib.Modules.ProductCategory.ProductCategory", b =>
                {
                    b.Property<long?>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime?>("CreatedTime")
                        .IsRequired();

                    b.Property<DateTime?>("DeletedTime");

                    b.Property<bool?>("Enabled");

                    b.Property<string>("Image");

                    b.Property<bool?>("IsDeleted");

                    b.Property<DateTime?>("ModifiedTime");

                    b.Property<string>("Name")
                        .IsRequired();

                    b.Property<string>("Note");

                    b.Property<string>("Password");

                    b.Property<long?>("ProductTypeId");

                    b.Property<DateTime?>("PublishedTime");

                    b.Property<string>("Slug");

                    b.Property<int?>("SpecialAttr");

                    b.Property<string>("Tags");

                    b.Property<byte[]>("TimeStamp")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate();

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("ProductCategories");
                });

            modelBuilder.Entity("AppLib.Modules.ProductCategory.ProductCategorySection", b =>
                {
                    b.Property<long?>("ProductCategoryId");

                    b.Property<long?>("SectionId");

                    b.HasKey("ProductCategoryId", "SectionId");

                    b.HasIndex("SectionId");

                    b.ToTable("ProductCategorySections");
                });

            modelBuilder.Entity("AppLib.Modules.ProductCategory.Section", b =>
                {
                    b.Property<long?>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime?>("CreatedTime")
                        .IsRequired();

                    b.Property<DateTime?>("DeletedTime");

                    b.Property<bool?>("Enabled");

                    b.Property<bool?>("IsDeleted");

                    b.Property<DateTime?>("ModifiedTime");

                    b.Property<string>("Name")
                        .IsRequired();

                    b.Property<byte[]>("TimeStamp")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate();

                    b.HasKey("Id");

                    b.ToTable("Sections");
                });

            modelBuilder.Entity("AppLib.Modules.ProductRecommend.ProductRecommend", b =>
                {
                    b.Property<long?>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime?>("CreatedDate");

                    b.Property<bool?>("IsActivate");

                    b.Property<bool?>("IsDeleted");

                    b.Property<long?>("PopularProductId")
                        .IsRequired();

                    b.Property<int>("Ranking");

                    b.Property<long?>("RecommendProductId")
                        .IsRequired();

                    b.Property<DateTime?>("UpdatedDate");

                    b.HasKey("Id");

                    b.HasIndex("PopularProductId");

                    b.HasIndex("RecommendProductId");

                    b.ToTable("ProductRecommends");
                });

            modelBuilder.Entity("AppLib.Modules.ProductType.ProductType", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Abbr");

                    b.Property<DateTime?>("CreatedDate");

                    b.Property<string>("Icon");

                    b.Property<bool?>("IsActivate");

                    b.Property<bool?>("IsDelete");

                    b.Property<int?>("Ranking");

                    b.Property<byte[]>("TimeStamp")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate();

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(250);

                    b.Property<DateTime?>("UpdatedDate");

                    b.HasKey("Id");

                    b.ToTable("ProductTypes");
                });

            modelBuilder.Entity("AppLib.Modules.Relation.Relation", b =>
                {
                    b.Property<long?>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime?>("CreatedDate")
                        .IsRequired();

                    b.Property<bool?>("IsActivate");

                    b.Property<bool?>("IsPayer");

                    b.Property<int?>("Ranking");

                    b.Property<byte[]>("TimeStamp")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate();

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.Property<DateTime?>("UpdatedDate");

                    b.HasKey("Id");

                    b.ToTable("Relations");
                });

            modelBuilder.Entity("AppLib.Modules.Spouse.Spouse", b =>
                {
                    b.Property<long?>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime?>("BirthDate");

                    b.Property<string>("Building")
                        .HasMaxLength(50);

                    b.Property<string>("CitizenId")
                        .HasMaxLength(20);

                    b.Property<DateTime?>("CreatedDate")
                        .IsRequired();

                    b.Property<long?>("DistrictId");

                    b.Property<string>("Email")
                        .HasMaxLength(50);

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.Property<string>("Gender")
                        .HasMaxLength(10);

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.Property<string>("Mobile")
                        .HasMaxLength(10);

                    b.Property<string>("Moo")
                        .HasMaxLength(50);

                    b.Property<string>("No");

                    b.Property<long?>("OrderId")
                        .IsRequired();

                    b.Property<long?>("ProvinceId");

                    b.Property<string>("Road")
                        .HasMaxLength(50);

                    b.Property<string>("Soi")
                        .HasMaxLength(50);

                    b.Property<long?>("StatusId");

                    b.Property<long?>("SubDistrictId");

                    b.Property<byte[]>("TimeStamp")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate();

                    b.Property<long?>("TitleId")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.Property<DateTime?>("UpdatedDate");

                    b.Property<long?>("ZipCodeId");

                    b.HasKey("Id");

                    b.HasIndex("DistrictId");

                    b.HasIndex("ProvinceId");

                    b.HasIndex("StatusId");

                    b.HasIndex("SubDistrictId");

                    b.HasIndex("TitleId");

                    b.HasIndex("ZipCodeId");

                    b.ToTable("Spouses");
                });

            modelBuilder.Entity("AppLib.Modules.Status.Status", b =>
                {
                    b.Property<long?>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime?>("CreatedDate")
                        .IsRequired();

                    b.Property<bool?>("IsActivate");

                    b.Property<int?>("Ranking");

                    b.Property<byte[]>("TimeStamp")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate();

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.Property<DateTime?>("UpdatedDate");

                    b.HasKey("Id");

                    b.ToTable("Statuses");
                });

            modelBuilder.Entity("AppLib.Modules.Title.Title", b =>
                {
                    b.Property<long?>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime?>("CreatedDate")
                        .IsRequired();

                    b.Property<bool?>("IsActivate");

                    b.Property<bool?>("IsDeleted");

                    b.Property<int?>("Ranking");

                    b.Property<byte[]>("TimeStamp")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate();

                    b.Property<string>("TitleName")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.Property<DateTime?>("UpdatedDate");

                    b.HasKey("Id");

                    b.ToTable("Titles");
                });

            modelBuilder.Entity("AppLib.Modules.Utm.Utm", b =>
                {
                    b.Property<long?>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Campaign")
                        .IsRequired()
                        .HasMaxLength(255);

                    b.Property<DateTime?>("CreatedDate")
                        .IsRequired();

                    b.Property<bool?>("IsActivate");

                    b.Property<bool?>("IsDelete");

                    b.Property<string>("Medium")
                        .IsRequired()
                        .HasMaxLength(255);

                    b.Property<long>("Ranking");

                    b.Property<string>("Source")
                        .IsRequired()
                        .HasMaxLength(255);

                    b.Property<byte[]>("TimeStamp")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate();

                    b.Property<DateTime?>("UpdatedDate");

                    b.HasKey("Id");

                    b.ToTable("Utms");
                });

            modelBuilder.Entity("AppLib.Modules.Banner.Banner", b =>
                {
                    b.HasOne("AppLib.Modules.Personal.Personal", "Personal")
                        .WithMany("Banners")
                        .HasForeignKey("PersonalId");

                    b.HasOne("AppLib.Modules.Utm.Utm", "Utm")
                        .WithMany("Banners")
                        .HasForeignKey("UtmId");
                });

            modelBuilder.Entity("AppLib.Modules.Beneficiary.Beneficiary", b =>
                {
                    b.HasOne("AppLib.Modules.Relation.Relation", "Relation")
                        .WithMany("Beneficiaries")
                        .HasForeignKey("RelationId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("AppLib.Modules.Title.Title", "Title")
                        .WithMany("Beneficiaries")
                        .HasForeignKey("TitleId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("AppLib.Modules.DropLead.DropLead", b =>
                {
                    b.HasOne("AppLib.Modules.DropLead.Help")
                        .WithMany("DropLeads")
                        .HasForeignKey("HelpId");
                });

            modelBuilder.Entity("AppLib.Modules.Insured.Insured", b =>
                {
                    b.HasOne("AppLib.Modules.Location.District", "District")
                        .WithMany()
                        .HasForeignKey("DistrictId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("AppLib.Modules.InsuredType.InsuredType", "InsuredType")
                        .WithMany("Insured")
                        .HasForeignKey("InsuredTypeId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("AppLib.Modules.JobDescription.JobDescription", "JobDescription")
                        .WithMany()
                        .HasForeignKey("JobDescriptionId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("AppLib.Modules.Job.Job", "Job")
                        .WithMany("Insureds")
                        .HasForeignKey("JobId");

                    b.HasOne("AppLib.Modules.Nationality.Nationality", "Nationality")
                        .WithMany()
                        .HasForeignKey("NationalityId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("AppLib.Modules.Order.Order", "Order")
                        .WithMany("Insureds")
                        .HasForeignKey("OrderId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("AppLib.Modules.Location.Province", "Province")
                        .WithMany()
                        .HasForeignKey("ProvinceId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("AppLib.Modules.Relation.Relation", "Relation")
                        .WithMany()
                        .HasForeignKey("RelationId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("AppLib.Modules.Status.Status", "Status")
                        .WithMany()
                        .HasForeignKey("StatusId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("AppLib.Modules.Location.SubDistrict", "SubDistrict")
                        .WithMany()
                        .HasForeignKey("SubDistrictId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("AppLib.Modules.Title.Title", "Title")
                        .WithMany()
                        .HasForeignKey("TitleId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("AppLib.Modules.Location.ZipCode", "ZipCode")
                        .WithMany()
                        .HasForeignKey("ZipCodeId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("AppLib.Modules.JobDescription.JobDescription", b =>
                {
                    b.HasOne("AppLib.Modules.Job.Job", "Job")
                        .WithMany("JobDescriptions")
                        .HasForeignKey("JobId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("AppLib.Modules.Kid.Kid", b =>
                {
                    b.HasOne("AppLib.Modules.Location.District", "District")
                        .WithMany("Kids")
                        .HasForeignKey("DistrictId");

                    b.HasOne("AppLib.Modules.Location.Province", "Province")
                        .WithMany("Kids")
                        .HasForeignKey("ProvinceId");

                    b.HasOne("AppLib.Modules.Status.Status", "Status")
                        .WithMany("Kids")
                        .HasForeignKey("StatusId");

                    b.HasOne("AppLib.Modules.Location.SubDistrict", "SubDistrict")
                        .WithMany("Kids")
                        .HasForeignKey("SubDistrictId");

                    b.HasOne("AppLib.Modules.Title.Title", "Title")
                        .WithMany("Kids")
                        .HasForeignKey("TitleId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("AppLib.Modules.Location.ZipCode", "ZipCode")
                        .WithMany("Kids")
                        .HasForeignKey("ZipCodeId");
                });

            modelBuilder.Entity("AppLib.Modules.LifeStyleCategory.LifeStyle", b =>
                {
                    b.HasOne("AppLib.Modules.LifeStyleCategory.LifeStyleCategory", "LifeStyleCategory")
                        .WithMany("LifeStyles")
                        .HasForeignKey("LifeStyleCategoryId");
                });

            modelBuilder.Entity("AppLib.Modules.LifeStyleCategory.LifeStyleCategoryProduct", b =>
                {
                    b.HasOne("AppLib.Modules.LifeStyleCategory.LifeStyleCategory", "LifeStyleCategory")
                        .WithMany("LifeStyleCategoryProducts")
                        .HasForeignKey("LifeStyleCategoryId");

                    b.HasOne("AppLib.Modules.Product.Product", "Product")
                        .WithMany("LifeStyleCategoryProducts")
                        .HasForeignKey("ProductId");
                });

            modelBuilder.Entity("AppLib.Modules.LifeStyleCategory.LifeStyleProduct", b =>
                {
                    b.HasOne("AppLib.Modules.LifeStyleCategory.LifeStyle", "LifeStyle")
                        .WithMany("LifeStyleProducts")
                        .HasForeignKey("LifeStyleId");

                    b.HasOne("AppLib.Modules.Product.Product", "Product")
                        .WithMany("LifeStyleProducts")
                        .HasForeignKey("ProductId");
                });

            modelBuilder.Entity("AppLib.Modules.Location.District", b =>
                {
                    b.HasOne("AppLib.Modules.Location.Province", "Province")
                        .WithMany("Districts")
                        .HasForeignKey("ProvinceId");
                });

            modelBuilder.Entity("AppLib.Modules.Location.SubDistrict", b =>
                {
                    b.HasOne("AppLib.Modules.Location.District", "District")
                        .WithMany("SubDistricts")
                        .HasForeignKey("DistrictId");
                });

            modelBuilder.Entity("AppLib.Modules.Location.ZipCode", b =>
                {
                    b.HasOne("AppLib.Modules.Location.SubDistrict", "SubDistrict")
                        .WithMany("ZipCodes")
                        .HasForeignKey("SubDistrictId");
                });

            modelBuilder.Entity("AppLib.Modules.Order.Order", b =>
                {
                    b.HasOne("AppLib.Modules.Location.District")
                        .WithMany("Orders")
                        .HasForeignKey("DistrictId");

                    b.HasOne("AppLib.Modules.Job.Job")
                        .WithMany("Orders")
                        .HasForeignKey("JobId");

                    b.HasOne("AppLib.Modules.Nationality.Nationality")
                        .WithMany("Orders")
                        .HasForeignKey("NationalityId");

                    b.HasOne("AppLib.Modules.Product.Product", "Product")
                        .WithMany("Orders")
                        .HasForeignKey("ProductId");

                    b.HasOne("AppLib.Modules.Location.Province")
                        .WithMany("Orders")
                        .HasForeignKey("ProvinceId");

                    b.HasOne("AppLib.Modules.Status.Status")
                        .WithMany("Orders")
                        .HasForeignKey("StatusId");

                    b.HasOne("AppLib.Modules.Location.SubDistrict")
                        .WithMany("Orders")
                        .HasForeignKey("SubDistrictId");

                    b.HasOne("AppLib.Modules.Title.Title")
                        .WithMany("Orders")
                        .HasForeignKey("TitleId");

                    b.HasOne("AppLib.Modules.Location.ZipCode")
                        .WithMany("Orders")
                        .HasForeignKey("ZipCodeId");
                });

            modelBuilder.Entity("AppLib.Modules.Payer.Payer", b =>
                {
                    b.HasOne("AppLib.Modules.Location.District", "District")
                        .WithMany("Payers")
                        .HasForeignKey("DistrictId");

                    b.HasOne("AppLib.Modules.Location.Province", "Province")
                        .WithMany("Payers")
                        .HasForeignKey("ProvinceId");

                    b.HasOne("AppLib.Modules.Relation.Relation", "Relation")
                        .WithMany("Payers")
                        .HasForeignKey("RelationId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("AppLib.Modules.Location.SubDistrict", "SubDistrict")
                        .WithMany("Payers")
                        .HasForeignKey("SubDistrictId");

                    b.HasOne("AppLib.Modules.Title.Title", "Title")
                        .WithMany("Payers")
                        .HasForeignKey("TitleId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("AppLib.Modules.Location.ZipCode", "ZipCode")
                        .WithMany("Payers")
                        .HasForeignKey("ZipCodeId");
                });

            modelBuilder.Entity("AppLib.Modules.Product.Product", b =>
                {
                    b.HasOne("AppLib.Modules.ProductType.ProductType", "ProductType")
                        .WithMany("Products")
                        .HasForeignKey("ProductTypeId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("AppLib.Modules.ProductCategory.ProductCategorySection", b =>
                {
                    b.HasOne("AppLib.Modules.ProductCategory.ProductCategory", "ProductCategory")
                        .WithMany("ProductCategorySections")
                        .HasForeignKey("ProductCategoryId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("AppLib.Modules.ProductCategory.Section", "Section")
                        .WithMany("ProductCategorySections")
                        .HasForeignKey("SectionId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("AppLib.Modules.ProductRecommend.ProductRecommend", b =>
                {
                    b.HasOne("AppLib.Modules.Product.Product", "PopularProduct")
                        .WithMany("ProductPopulars")
                        .HasForeignKey("PopularProductId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("AppLib.Modules.Product.Product", "RecommendProduct")
                        .WithMany("ProductRecommends")
                        .HasForeignKey("RecommendProductId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("AppLib.Modules.Spouse.Spouse", b =>
                {
                    b.HasOne("AppLib.Modules.Location.District", "District")
                        .WithMany("Spouses")
                        .HasForeignKey("DistrictId");

                    b.HasOne("AppLib.Modules.Location.Province", "Province")
                        .WithMany("Spouses")
                        .HasForeignKey("ProvinceId");

                    b.HasOne("AppLib.Modules.Status.Status", "Status")
                        .WithMany("Spouses")
                        .HasForeignKey("StatusId");

                    b.HasOne("AppLib.Modules.Location.SubDistrict", "SubDistrict")
                        .WithMany("Spouses")
                        .HasForeignKey("SubDistrictId");

                    b.HasOne("AppLib.Modules.Title.Title", "Title")
                        .WithMany("Spouses")
                        .HasForeignKey("TitleId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("AppLib.Modules.Location.ZipCode", "ZipCode")
                        .WithMany("Spouses")
                        .HasForeignKey("ZipCodeId");
                });
#pragma warning restore 612, 618
        }
    }
}
